# Query: Form
# Flags: RegExp
# ContextLines: 1

119 results - 17 files

config.py:
  15      def init_app(app):
  16:         # Specific initializations can be performed.
  17          pass

Pipfile:
  17  email-validator = "*"
  18: wtforms = {extras = ["email"], version = "==2.3.1"}
  19  itsdangerous = "*"

requirements.txt:
  26  werkzeug==1.0.1; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4'
  27: wtforms[email]==2.3.1

app/auth/forms.py:
   1: from flask_wtf import FlaskForm as Form
   2: from wtforms import StringField, SubmitField, PasswordField, BooleanField
   3: from wtforms.validators import Required, Email, Length, Regexp, EqualTo
   4  # import email_validator
   5: from wtforms import ValidationError
   6  from ..models import User
   7  
   8: class LoginForm(Form):
   9      email = StringField('Email', validators=[Required(), Length(1, 64), Email()])

  15  
  16: class RegistrationForm(Form):
  17      email = StringField('Email', validators=[Required(), Length(1, 64), Email()])

  38  
  39: class ChangePasswordForm(Form):
  40      old_password = PasswordField('Old Password', validators=[Required()])

  46  
  47: class PasswordResetRequestForm(Form):
  48      email = StringField('Email', validators=[Required(), Length(1, 64), Email()])

  51  
  52: class PasswordResetForm(Form):
  53      email = StringField('Email', validators=[Required(), Length(1, 64), Email()])

  64  
  65: class ChangeEmailForm(Form):
  66      email = StringField('Email', validators=[Required(), Length(1, 64), Email()])

app/auth/views.py:
    4  from . import auth 
    5: from .forms import (
    6:     LoginForm, RegistrationForm, ChangePasswordForm, ChangeEmailForm, PasswordResetRequestForm
    7  )

   13  def login():
   14:     form = LoginForm()
   15:     if form.validate_on_submit(): # if form is valid
   16          # Search for user in database
   17:         user = User.query.filter_by(email=form.email.data).first()
   18          # If the user is None and the password is verified
   19:         if user is not None and user.verify_password(form.password.data):
   20:             login_user(user, form.remeber_me.data) # Login the user 
   21              # Return the user to the home page

   25      # Always render login template
   26:     return render_template('auth/login.html', form=form)
   27  

   38  def register():
   39:     form = RegistrationForm()
   40:     if form.validate_on_submit():
   41:         user = User(email=form.email.data, 
   42:                     username=form.username.data,
   43:                     password=form.password.data)
   44          db.session.add(user)

   49          return redirect(url_for('auth.login'))
   50:     return render_template('auth/register.html', form=form)
   51  

   93  def change_password():
   94:     form = ChangePasswordForm()
   95:     if form.validate_on_submit():
   96          # old password verification
   97:         if current_user.verify_password(form.old_password.data):
   98:             current_user.password = form.password.data
   99              db.session.add(current_user)

  103              flash('Invalid password')
  104:     render_template('auth/change_password.html', form=form)
  105  

  108  def change_email_request():
  109:     form = ChangeEmailForm()
  110:     if form.validate_on_submit():
  111:         if current_user.verify_password(form.password.data):
  112:             new_email = form.email.data
  113              token = current_user.generate_confimation_token(new_email)

  121      
  122:     return render_template('auth/change_email.html', form=form)
  123  

  130      
  131:     form = PasswordResetRequestForm()
  132:     if form.validate_on_submit():
  133:         user = User.query.filter_by(email=form.email.data).first()
  134          # Send a security token to registered user 

  142          return redirect(url_for('auth.login'))
  143:     return render_template('auth/reset_password.html', form=form)
  144  

  148          return redirect(url_for('main.index'))
  149:     form = PasswordResetForm()
  150:     if form.validate_on_submit():
  151:         user = User.query.filter_by(email=form.email.data).first()
  152          # Check is the user object belongs to sessions

  154              return redirect(url_for('main.index'))
  155:         if user.reset_password(token, form.password.data):
  156              flash('Your password has been updated')

app/main/__init__.py:
  4  
  5: from . import views, errors, forms
  6  

app/main/forms.py:
  1: from flask_wtf import FlaskForm as Form
  2: from wtforms import StringField, SubmitField 
  3: from wtforms.validators import Required
  4  from . import main

  6  ### Froms ----------------------->
  7: class NameForm(Form):
  8      name = StringField('What is your name?', validators=[Required()])

app/main/views.py:
   4  from . import main
   5: from .forms import NameForm
   6  from .. import db

  11      # name = None
  12:     form = NameForm()
  13:     if  form.validate_on_submit():
  14:         user = User.query.filter_by(username=form.name.data).first()
  15          # check if the user is known
  16          if user is None:
  17:             user = User(username=form.name.data)
  18              db.session.add(user)

  29              session['known'] = True
  30:         session['name'] = form.name.data
  31:         form.name.data = ''
  32  

  36          current_time=datetime.utcnow(), 
  37:         form=form, name=session.get('name'),
  38          known = session.get('known', False))

app/templates/index.html:
  25  </div>
  26: <p>The current local date and time is <b>{{ moment(current_time).format('LLL') }}</b>.</p>
  27  <p><small>That was {{ moment(current_time).fromNow(refresh=True) }}</small></p>
  28: {{ wtf.quick_form(form)}}
  29  {% endblock %}

app/templates/auth/change_password.html:
   9  <div class="col-md-4">
  10:   {{ wtf.quick_form(form) }}
  11  </div>

app/templates/auth/login.html:
  11  <div class="col-md-4">
  12:   {{ wtf.quick_form(form) }}
  13    <p> 

app/templates/auth/register.html:
  10  <div class="col-md-4">
  11:   {{ wtf.quick_form(form) }}
  12  </div>

application-old/app.py:
    8  
    9: from flask_wtf import FlaskForm as Form
   10: from wtforms import StringField, SubmitField 
   11: from wtforms.validators import Required
   12  

   83      # name = None
   84:     form = NameForm()
   85:     if form.validate_on_submit():
   86:         user = User.query.filter_by(username=form.name.data).first()
   87          # check if the user is known
   88          if user is None:
   89:             user = User(username=form.name.data)
   90              db.session.add(user)

  100              session['known'] = True
  101:         session['name'] = form.name.data
  102:         form.name.data = ''
  103  

  106      return render_template('index.html', current_time=datetime.utcnow(), 
  107:             form=form, name=session.get('name'), known = session.get('known' , False))
  108  

  122  ### Froms ----------------------->
  123: class NameForm(Form):
  124      name = StringField('What is your name?', validators=[Required()])

application-old/requirements.txt:
  13  Werkzeug==1.0.1
  14: WTForms==2.3.1

application-old/migrations/alembic.ini:
  18  
  19: [formatters]
  20  keys = generic

  40  level = NOTSET
  41: formatter = generic
  42  
  43: [formatter_generic]
  44: format = %(levelname)-5.5s [%(name)s] %(message)s
  45  datefmt = %H:%M:%S

application-old/templates/index.html:
  16  </div>
  17: <p>The current local date and time is <b>{{ moment(current_time).format('LLL') }}</b>.</p>
  18  <p><small>That was {{ moment(current_time).fromNow(refresh=True) }}</small></p>
  19: {{ wtf.quick_form(form)}}
  20  {% endblock %}

migrations/alembic.ini:
  18  
  19: [formatters]
  20  keys = generic

  40  level = NOTSET
  41: formatter = generic
  42  
  43: [formatter_generic]
  44: format = %(levelname)-5.5s [%(name)s] %(message)s
  45  datefmt = %H:%M:%S
